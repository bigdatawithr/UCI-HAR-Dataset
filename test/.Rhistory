train.data$P38 = 1
train.data[train.data[4] == 'Big Cities',]$P38 = 1
train.data$P39 = -1
train.data[train.data$Type == 'FC',]$P39 = 1
tests.data$P38 = -1
tests.data[tests.data[4] == 'Big Cities',]$P38 = 1
tests.data$P39 = -1
tests.data[tests.data$Type == 'FC',]$P39 = 1
vars <- setdiff(colnames(train.data),colnames(train.data)[c(1,2,3,4,5,43)])
predvars <- paste(vars, collapse = "+")
train.data[,vars] <- (train.data[,vars] - colMeans(train.data[,vars]))/colSds(data.matrix(train.data[,vars]))
tests.data[,vars] <- (tests.data[,vars] - colMeans(tests.data[,vars]))/colSds(data.matrix(tests.data[,vars]))
train.data$P38 = -1
train.data[train.data[4] == 'Big Cities',]$P38 = 1
train.data$P39 = -1
train.data[train.data$Type == 'FC',]$P39 = 1
tests.data$P38 = -1
tests.data[tests.data[4] == 'Big Cities',]$P38 = 1
tests.data$P39 = -1
tests.data[tests.data$Type == 'FC',]$P39 = 1
strformula = paste(c("revenue~",predvars),collapse = "")
form.lin <- as.formula(strformula)
set.seed(4678152)
rdfmodel <- randomForest(form.lin, data=train.data,importance=TRUE, ntree=80)
summary(rdfmodel)
pred_revenue <- predict(rdfmodel, train.data)
RESEC = sqrt( sum( (pred_revenue -   train.data$revenue)^2 , na.rm = TRUE ) / nrow(train.data) )
pred_revenue <- predict(rdfmodel, train.data)
rdfmodel <- randomForest(form.lin, data=train.data,importance=TRUE, ntree=80)
tests.data = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Resturant\\test.csv", header = TRUE, sep = ",", quote = "\\",row.names=NULL)
train.data = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Resturant\\train.csv", header = TRUE, sep = ",", quote = "\\",row.names=NULL)
tests.data <- within(tests.data, day <- cut(as.POSIXct(tests.data$Open.Date, format="%m/%d/%Y"), "day", labels = FALSE))
tests.data$day = max_day - tests.data$day
tests.data$day = log(tests.data$day)
train.data <- within(train.data, day <- cut(as.POSIXct(train.data$Open.Date, format="%m/%d/%Y"), "day", labels = FALSE))
train.data$day = max_day - train.data$day
train.data$day = log(train.data$day)
train.data = train.data[train.data$revenue <1.5e+07,]
train.data$P38 = 1
train.data[train.data[4] == 'Big Cities',]$P38 = 1
train.data$P39 = -1
train.data[train.data$Type == 'FC',]$P39 = 1
tests.data$P38 = -1
tests.data[tests.data[4] == 'Big Cities',]$P38 = 1
tests.data$P39 = -1
tests.data[tests.data$Type == 'FC',]$P39 = 1
vars <- setdiff(colnames(train.data),colnames(train.data)[c(1,2,3,4,5,43)])
vars
predvars <- paste(vars, collapse = "+")
train.data[,vars] <- (train.data[,vars] - colMeans(train.data[,vars]))/colSds(data.matrix(train.data[,vars]))
tests.data[,vars] <- (tests.data[,vars] - colMeans(tests.data[,vars]))/colSds(data.matrix(tests.data[,vars]))
train.data$P38 = -1
train.data[train.data[4] == 'Big Cities',]$P38 = 1
train.data$P39 = -1
train.data[train.data$Type == 'FC',]$P39 = 1
tests.data$P38 = -1
tests.data[tests.data[4] == 'Big Cities',]$P38 = 1
tests.data$P39 = -1
tests.data[tests.data$Type == 'FC',]$P39 = 1
strformula = paste(c("revenue~",predvars),collapse = "")
form.lin <- as.formula(strformula)
set.seed(4678152)
rdfmodel <- randomForest(form.lin, data=train.data,importance=TRUE, ntree=80)
View(train.data)
View(train.data)
View(train.data)
View(train.data)
form.lin
rdfmodel <- randomForest(form.lin, data=train.data,importance=TRUE, ntree=80)
View(train.data)
View(train.data)
max_day = 6850
tests.data = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Resturant\\test.csv", header = TRUE, sep = ",", quote = "\\",row.names=NULL)
train.data = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Resturant\\train.csv", header = TRUE, sep = ",", quote = "\\",row.names=NULL)
tests.data <- within(tests.data, day <- cut(as.POSIXct(tests.data$Open.Date, format="%m/%d/%Y"), "day", labels = FALSE))
tests.data$day = max_day - tests.data$day
tests.data$day = log(tests.data$day)
train.data <- within(train.data, day <- cut(as.POSIXct(train.data$Open.Date, format="%m/%d/%Y"), "day", labels = FALSE))
train.data$day = max_day - train.data$day
train.data$day = log(train.data$day)
train.data = train.data[train.data$revenue <1.5e+07,]
train.data$P38 = 1
train.data[train.data[4] == 'Big Cities',]$P38 = 1
train.data$P39 = -1
train.data[train.data$Type == 'FC',]$P39 = 1
tests.data$P38 = -1
tests.data[tests.data[4] == 'Big Cities',]$P38 = 1
tests.data$P39 = -1
tests.data[tests.data$Type == 'FC',]$P39 = 1
vars <- setdiff(colnames(train.data),colnames(train.data)[c(1,2,3,4,5,43)])
predvars <- paste(vars, collapse = "+")
predvars
View(train.data)
View(train.data)
train.data[,vars] <- (train.data[,vars] - colMeans(train.data[,vars]))/colSds(data.matrix(train.data[,vars]))
View(train.data)
View(train.data)
tests.data = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Resturant\\test.csv", header = TRUE, sep = ",", quote = "\\",row.names=NULL)
train.data = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Resturant\\train.csv", header = TRUE, sep = ",", quote = "\\",row.names=NULL)
tests.data <- within(tests.data, day <- cut(as.POSIXct(tests.data$Open.Date, format="%m/%d/%Y"), "day", labels = FALSE))
tests.data$day = max_day - tests.data$day
tests.data$day = log(tests.data$day)
train.data <- within(train.data, day <- cut(as.POSIXct(train.data$Open.Date, format="%m/%d/%Y"), "day", labels = FALSE))
train.data$day = max_day - train.data$day
train.data$day = log(train.data$day)
train.data = train.data[train.data$revenue <1.5e+07,]
train.data$P38 = 1
train.data[train.data[4] == 'Big Cities',]$P38 = 1
train.data$P39 = -1
train.data[train.data$Type == 'FC',]$P39 = 1
tests.data$P38 = -1
tests.data[tests.data[4] == 'Big Cities',]$P38 = 1
tests.data$P39 = -1
tests.data[tests.data$Type == 'FC',]$P39 = 1
vars <- setdiff(colnames(train.data),colnames(train.data)[c(1,2,3,4,5,43)])
predvars <- paste(vars, collapse = "+")
colMeans(train.data[,vars])
colSds(data.matrix(train.data[,vars]))
train.data[,vars] - colMeans(train.data[,vars])
colSds(data.matrix(train.data[,vars]))
(train.data[,vars] - colMeans(train.data[,vars]))/colSds(data.matrix(train.data[,vars]))
library(matrixStats)
library(mgcv)
library(ggplot2)
library(randomForest)
max_day = 6850
tests.data = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Resturant\\test.csv", header = TRUE, sep = ",", quote = "\\",row.names=NULL)
train.data = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Resturant\\train.csv", header = TRUE, sep = ",", quote = "\\",row.names=NULL)
tests.data <- within(tests.data, day <- cut(as.POSIXct(tests.data$Open.Date, format="%m/%d/%Y"), "day", labels = FALSE))
tests.data$day = max_day - tests.data$day
tests.data$day = log(tests.data$day)
train.data <- within(train.data, day <- cut(as.POSIXct(train.data$Open.Date, format="%m/%d/%Y"), "day", labels = FALSE))
train.data$day = max_day - train.data$day
train.data$day = log(train.data$day)
train.data = train.data[train.data$revenue <1.5e+07,]
train.data$P38 = 1
train.data[train.data[4] == 'Big Cities',]$P38 = 1
train.data$P39 = -1
train.data[train.data$Type == 'FC',]$P39 = 1
tests.data$P38 = -1
tests.data[tests.data[4] == 'Big Cities',]$P38 = 1
tests.data$P39 = -1
tests.data[tests.data$Type == 'FC',]$P39 = 1
vars <- setdiff(colnames(train.data),colnames(train.data)[c(1,2,3,4,5,43)])
predvars <- paste(vars, collapse = "+")
train.data[,vars] <- (train.data[,vars] - colMeans(train.data[,vars]))/colSds(data.matrix(train.data[,vars]))
View(train.data)
View(train.data)
colSds(data.matrix(train.data[,vars]))
tests.data = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Resturant\\test.csv", header = TRUE, sep = ",", quote = "\\",row.names=NULL)
train.data = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Resturant\\train.csv", header = TRUE, sep = ",", quote = "\\",row.names=NULL)
tests.data <- within(tests.data, day <- cut(as.POSIXct(tests.data$Open.Date, format="%m/%d/%Y"), "day", labels = FALSE))
tests.data$day = max_day - tests.data$day
tests.data$day = log(tests.data$day)
train.data <- within(train.data, day <- cut(as.POSIXct(train.data$Open.Date, format="%m/%d/%Y"), "day", labels = FALSE))
train.data$day = max_day - train.data$day
train.data$day = log(train.data$day)
train.data = train.data[train.data$revenue <1.5e+07,]
train.data$P38 = 1
train.data[train.data[4] == 'Big Cities',]$P38 = 1
train.data$P39 = -1
train.data[train.data$Type == 'FC',]$P39 = 1
tests.data$P38 = -1
tests.data[tests.data[4] == 'Big Cities',]$P38 = 1
tests.data$P39 = -1
tests.data[tests.data$Type == 'FC',]$P39 = 1
vars <- setdiff(colnames(train.data),colnames(train.data)[c(1,2,3,4,5,43)])
predvars <- paste(vars, collapse = "+")
colSds(data.matrix(train.data[,vars]))
train.data$P38 = 0
train.data[train.data[4] == 'Big Cities',]$P38 = 1
train.data$P39 = 0
train.data[train.data$Type == 'FC',]$P39 = 1
tests.data$P38 = 0
tests.data[tests.data[4] == 'Big Cities',]$P38 = 1
tests.data$P39 = 0
tests.data[tests.data$Type == 'FC',]$P39 = 1
vars <- setdiff(colnames(train.data),colnames(train.data)[c(1,2,3,4,5,43)])
predvars <- paste(vars, collapse = "+")
colSds(data.matrix(train.data[,vars]))
(train.data[,vars] - colMeans(train.data[,vars]))/colSds(data.matrix(train.data[,vars]))
train.data[,vars] <- (train.data[,vars] - colMeans(train.data[,vars]))/colSds(data.matrix(train.data[,vars]))
tests.data[,vars] <- (tests.data[,vars] - colMeans(tests.data[,vars]))/colSds(data.matrix(tests.data[,vars]))
View(train.data)
View(train.data)
train.data$P38 = -1
train.data[train.data[4] == 'Big Cities',]$P38 = 1
train.data$P39 = -1
train.data[train.data$Type == 'FC',]$P39 = 1
tests.data$P38 = -1
tests.data[tests.data[4] == 'Big Cities',]$P38 = 1
tests.data$P39 = -1
tests.data[tests.data$Type == 'FC',]$P39 = 1
strformula = paste(c("revenue~",predvars),collapse = "")
form.lin <- as.formula(strformula)
View(train.data)
View(train.data)
set.seed(4678152)
rdfmodel <- randomForest(form.lin, data=train.data,importance=TRUE, ntree=80)
summary(rdfmodel)
pred_revenue <- predict(rdfmodel, train.data)
RESEC = sqrt( sum( (pred_revenue -   train.data$revenue)^2 , na.rm = TRUE ) / nrow(train.data) )
rdfmodel <- randomForest(form.lin, data=train.data,importance=TRUE, ntree=150)
summary(rdfmodel)
pred_revenue <- predict(rdfmodel, train.data)
RESEC = sqrt( sum( (pred_revenue -   train.data$revenue)^2 , na.rm = TRUE ) / nrow(train.data) )
lmmodel = lm(form.lin, data=train.data)
pred_revenue <- predict(lmmodel, train.data)
RESELM = sqrt( sum( (pred_revenue -   train.data$revenue)^2 , na.rm = TRUE ) / nrow(train.data) )
write.csv(dfres_rdf, "D:/101-Learning/DataScienceCompetetion/Resturant/my_prediction__norm_lm.csv",row.names=FALSE)
pred_revenue_test <- predict(lmmodel, tests.data)
dfres_lm = data.frame(Id = test$Id,Prediction = pred_revenue_test)
dfres_lm = data.frame(Id = tests.data$Id,Prediction = pred_revenue_test)
write.csv(dfres_lm, "D:/101-Learning/DataScienceCompetetion/Resturant/my_prediction__norm_lm.csv",row.names=FALSE)
summary(model)
summary(lmmodel)
tests.data = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Resturant\\test.csv", header = TRUE, sep = ",", quote = "\\",row.names=NULL)
train.data = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Resturant\\train.csv", header = TRUE, sep = ",", quote = "\\",row.names=NULL)
tests.data <- within(tests.data, day <- cut(as.POSIXct(tests.data$Open.Date, format="%m/%d/%Y"), "day", labels = FALSE))
tests.data$day = max_day - tests.data$day
tests.data$day = log(tests.data$day)
train.data <- within(train.data, day <- cut(as.POSIXct(train.data$Open.Date, format="%m/%d/%Y"), "day", labels = FALSE))
train.data$day = max_day - train.data$day
train.data$day = log(train.data$day)
train.data = train.data[train.data$revenue <1.5e+07,]
train.data$P38 = 0
train.data[train.data[4] == 'Big Cities',]$P38 = 1
train.data$P39 = 0
train.data[train.data$Type == 'FC',]$P39 = 1
tests.data$P38 = 0
tests.data[tests.data[4] == 'Big Cities',]$P38 = 1
tests.data$P39 = 0
tests.data[tests.data$Type == 'FC',]$P39 = 1
vars <- setdiff(colnames(train.data),colnames(train.data)[c(1,2,3,4,5,43)])
predvars <- paste(vars, collapse = "+")
a = (train.data[,vars] - colMeans(train.data[,vars]))
b = colSds(data.matrix(train.data[,vars]))
class(a)
class(b)
b
a
a[1]
a['P1']
b[1]
a['P1']/b[1]
c = a/b
c['P1']
c = a/b[1]
c['P1'] - a['P1']/b[1]
train.data[,vars] <- (train.data[,vars] - colMeans(train.data[,vars]))/colSds(data.matrix(train.data[,vars]))
tests.data[,vars] <- (tests.data[,vars] - colMeans(tests.data[,vars]))/colSds(data.matrix(tests.data[,vars]))
train.data$P38 = -1
train.data[train.data[4] == 'Big Cities',]$P38 = 1
train.data$P39 = -1
train.data[train.data$Type == 'FC',]$P39 = 1
tests.data$P38 = -1
tests.data[tests.data[4] == 'Big Cities',]$P38 = 1
tests.data$P39 = -1
tests.data[tests.data$Type == 'FC',]$P39 = 1
strformula = paste(c("revenue~",predvars),collapse = "")
form.lin <- as.formula(strformula)
set.seed(4678152)
rdfmodel <- randomForest(form.lin, data=train.data,importance=TRUE, ntree=150)
summary(rdfmodel)
pred_revenue <- predict(rdfmodel, train.data)
RESEC = sqrt( sum( (pred_revenue -   train.data$revenue)^2 , na.rm = TRUE ) / nrow(train.data) )
pred_revenue_test <- predict(rdfmodel, tests.data)
dfres_rdf = data.frame(Id = test$Id,Prediction = pred_revenue_test)
write.csv(dfres_rdf, "D:/101-Learning/DataScienceCompetetion/Resturant/my_prediction_norm_rdf.csv",row.names=FALSE)
lmmodel = lm(form.lin, data=train.data)
summary(lmmodel)
pred_revenue <- predict(lmmodel, train.data)
RESELM = sqrt( sum( (pred_revenue -   train.data$revenue)^2 , na.rm = TRUE ) / nrow(train.data) )
pred_revenue_test <- predict(lmmodel, tests.data)
dfres_lm = data.frame(Id = tests.data$Id,Prediction = pred_revenue_test)
write.csv(dfres_lm, "D:/101-Learning/DataScienceCompetetion/Resturant/my_prediction__norm_lm.csv",row.names=FALSE)
labels = read.csv("D:\\101-Learning\\DataScienceCompetetion\\Retinopathy\\trainLabels.csv",
header = TRUE, sep = ",", quote = "\\",row.names=NULL)
View(labels)
View(labels)
hist(labels[1])
hist(as.numberic(labels[1]))
hist(as.numeric(labels[1]))
hist(as.numeric(unlist(labels[1]))
)
summary(labels[1])
summary(labels[0])
summary(labels[2])
hist(as.numeric(unlist(labels[2])))
as.factor(labels[2])
as.factor(unlist(labels[2]))
idL = as.factor(unlist(labels[2]))
bar(as.numeric(unlist(labels[2])))
hist(idL)
nlabel = as.numeric(unlist(labels[2]))
class(nlabel)
n0 = sum(nlable == 0)
n0 = sum(nlabel == 0)
n0 = sum(nlabel == 0)
n1 = sum(nlabel == 1)
n2 = sum(nlabel == 2)
n3 = sum(nlabel == 3)
n4 = sum(nlabel == 4)
N = sum(nlabel)
print(n0/N)
N = sum(nlabel)
print(n0/N)
N = length(nlabel)
print(n0/N)
print(n0/N)
print(n1/N)
print(n2/N)
print(n3/N)
print(n4/N)
install.packages('dplyr')
library(dplyr)
install.packages('dplyr')
install.packages('dp1yr')
install.packages('dpIyr')
install.packages('dpLyr')
install.packages('dplyr')
install.packages('dplyr')
install.packages("dplyr")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("hadley/lazyeval")
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
install.packages("dplyr")
library(swirl)
install.packages("swril")
library(swirl)
install.packages("swril")
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packagesversion("dplyr")
packagesVersion("dplyr")
package_version("dplyr")
packageVersion("dplyr")
crab <- tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
pring(tbl_df)
print(tbl_df)
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(-X:size)
select(cran,-(1:cran:size))
select(cran,-cran:size)
X
cran:size
(cran:size)
select(cran,-(1:5))
select(cran,-(X:size))
filter(cran,package = "swirl")
filter(cran,package == "swirl")
filter(cran,r_version == "3.1.1",country == "US")
?Comparison
filter(cran,r_version <= "3.0.2",country == "India")
filter(cran,r_version <= "3.0.2",country == "IN")
filter(cran,country == "US" | "IN")
filter(cran,country == "US" | country == "IN")
filter(cran,X:size,size>100500)
filter(cran,r_os == "linux-gnu",size>100500)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 = select(cran,size:ip_id)
cran2 = select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(package),ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb = size/2^20)
mutate(cran3,size_gb = size_mb/2^10)
mutate(cran3,size/2^20,size_gb = size_mb/2^10)
mutate(cran3,size_mb = size/2^20,size_gb = size_mb/2^10)
mutate(cran3,correct_size = size+1000)
summarize(cran,avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran,package)
by_package
summarise(by_package,mean(size))
reset()
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
?n
?n_distinct
submit()
tbl
pack_sum
quantile(pack_sum$count,probs = 0.99)
top_counts <- filter(pakc_sum,count>679)
top_counts <- filter(pack_sum,count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99).
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
source(chain1.R)
source("chain1.R")
source("C:\Users\YUX\AppData\Local\Temp\Rtmpgd7rbl\chain1.R")
source("C:\\Users\\YUX\\AppData\\Local\\Temp\\Rtmpgd7rbl\\chain1.R")
submit()
submit()
submit()
submit()
submit()
library(csv)
setwd('D:\\101-Learning\\UCI HAR Dataset\\train\\')
uci_train = read.csv('X_train.txt',sep = ' ')
View(uci_train)
View(uci_train)
?read.csv
uci_train = read.csv('X_train.txt',sep = ' ',header = FALSE)
View(uci_train)
View(uci_train)
uci_label = read.csv('y_train.txt',sep = ' ',header = FALSE)
View(uci_label)
View(uci_label)
setwd('D:\\101-Learning\\UCI HAR Dataset\\test\\')
uci_test  = read.csv('X_test.txt',sep = ' ',header = FALSE)
uci_test_label = read.csv('y_test.txt',sep = ' ',header = FALSE)
rm uci_label
rm(uci_label)
uci_train_label = read.csv('y_train.txt',sep = ' ',header = FALSE)
setwd('D:\\101-Learning\\UCI HAR Dataset\\train\\')
uci_train_label = read.csv('y_train.txt',sep = ' ',header = FALSE)
uci_train$label = uci_train_label
View(uci_train)
View(uci_train)
str(uni_train)
str(uci_train)
uci_train = read.csv('X_train.txt',sep = "",header = FALSE)
uci_train_label = read.csv('y_train.txt',sep = ' ',header = FALSE)
str(uci_train)
setwd('D:\\101-Learning\\UCI HAR Dataset\\test\\')
uci_test  = read.csv('X_test.txt',sep = "",header = FALSE)
uci_test_label = read.csv('y_test.txt',sep = ' ',header = FALSE)
uci_train$label = uci_train_label
uci_test$label = uci_test_label
uci_data = rbind(uci_train,uci_test)
View(uci_train)
View(uci_train)
View(uci_test)
View(uci_test)
View(uci_test)
View(uci_test)
rownames(uci_tran) <- c()
rownames(uci_train) <- c()
rownames(uci_test) <- c()
uci_data = rbind(uci_train,uci_test)
View(uci_test)
View(uci_test)
?make.names
?make.names
?make.names()
uci_data = rbind(uci_train,uci_test,make.row.names = TRUE)
uci_data = rbind(uci_train,uci_test,make.row.names = FALSE)
uci_data = rbind(uci_train,uci_test)
row.names(uci_train)
?row.name
?row.names
